{
	"info": {
		"_postman_id": "2faec5b2-03b8-453d-a102-869fe59a37f8",
		"name": "Books_Rest_API_Collection",
		"description": "This is books api collection. here we can get books update books and delete books",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19818639"
	},
	"item": [
		{
			"name": "Adding New Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// No changes required for fixing JSONError\r",
							"var jsonData = pm.response.json()\r",
							"pm.environment.set(\"BookingId\", jsonData.bookingid)\r",
							"\r",
							"// status code testing\r",
							"\r",
							"pm.test(\"Status Code is 200\", function() {\r",
							"  pm.response.to.have.status(200);\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var firstName = pm.variables.replaceIn(\"{{$randomFirstName}}\")\r",
							"// console.log(firstName)\r",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")\r",
							"console.log(lastName)\r",
							"var totalPrice = pm.variables.replaceIn(\"{{$randomInt}}\")\r",
							"var depositPaid = pm.variables.replaceIn(\"{{$randomBoolean}}\")\r",
							"// console.log(depositPaid)\r",
							"var additionalNeeds = pm.variables.replaceIn(\"{{$randomLoremWords}}\")\r",
							"\r",
							"const moment = require(\"moment\")\r",
							"const today = moment();\r",
							"const checkInTime = today.format(\"YYYY-MM-DD\")\r",
							"// console.log(checkInTime)\r",
							"const checkOutTime = today.add(5, \"d\").add(1, \"M\").add(1, \"Y\").format(\"YYYY-MM-DD\")\r",
							"// console.log(checkOutTime);\r",
							"\r",
							"// console.log(\"Previous Date\", today.subtract(5,\"d\").format(\"YYYY-MM-DD\"))\r",
							"\r",
							"pm.environment.set(\"FirstName\", firstName)\r",
							"pm.environment.set(\"LastName\", lastName)\r",
							"pm.environment.set(\"TotalPrice\", totalPrice)\r",
							"pm.environment.set(\"DepositPaid\", depositPaid)\r",
							"pm.environment.set(\"CheckInTime\", checkInTime)\r",
							"pm.environment.set(\"CheckOutTime\", checkOutTime)\r",
							"pm.environment.set(\"AdditionalNeeds\", additionalNeeds)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"firstname\" : \"{{FirstName}}\",\r\n\t\"lastname\" : \"{{LastName}}\",\r\n\t\"totalprice\" : \"{{TotalPrice}}\",\r\n\t\"depositpaid\" : \"{{DepositPaid}}\",\r\n\t\"bookingdates\" : {\r\n\t\"checkin\" : \"{{CheckInTime}}\",\r\n    \"checkout\" : \"{{CheckOutTime}}\"\r\n\t},\r\n\t\"additionalneeds\" : \"{{AdditionalNeeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						""
					]
				},
				"description": "{  \n\"bookingid\": 4250,  \n\"booking\": {  \n\"firstname\": \"Julia\",  \n\"lastname\": \"Mills\",  \n\"totalprice\": 767,  \n\"depositpaid\": true,  \n\"bookingdates\": {  \n\"checkin\": \"2024-10-22\",  \n\"checkout\": \"2025-11-27\"  \n},  \n\"additionalneeds\": \"veritatis numquam dicta\"  \n}  \n}"
			},
			"response": []
		},
		{
			"name": "Getting Books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"// console.log(statusCode)\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json()\r",
							"\r",
							"if(statusCode == 200){\r",
							"\r",
							"    // Verify first Name\r",
							"\r",
							"pm.test(\"First Name Validation\", function (){\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"FirstName\"))\r",
							"})\r",
							"\r",
							"// verify first name not null\r",
							"pm.test(\"First Name should not be null\", function(){\r",
							"    pm.expect(jsonData.firstname).not.to.eql(null)\r",
							"})\r",
							"\r",
							"// First Name should not be null\r",
							"\r",
							"pm.test(\"First Name should not be null\", function(){\r",
							"    pm.expect(jsonData.firstname).not.to.eql(null)\r",
							"})\r",
							"\r",
							"// Verify total price\r",
							"\r",
							"pm.test(\"Verify Price\", function(){\r",
							"    pm.expect(jsonData.totalprice).to.eql(parseInt(pm.environment.get(\"TotalPrice\")))\r",
							"})\r",
							"\r",
							"\r",
							"//Verify Checkin Date\r",
							"\r",
							"pm.test(\"Verify Check In Date\", function(){\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"CheckInTime\"))\r",
							"\r",
							"})\r",
							"\r",
							"\r",
							"} else if(statusCode == 404){\r",
							"    pm.test(\"Not Found\")\r",
							"}\r",
							"else if(statusCode == 403){\r",
							"    pm.test(\"Permission required\");\r",
							"}\r",
							"else if(statusCode == 404){\r",
							"    pm.test(\"Not Found\");\r",
							"}\r",
							"else{\r",
							"    pm.test(\"Something Went Wrong\");\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{BookingId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingId}}"
					]
				},
				"description": "{  \n\"firstname\": \"Rosalind\",  \n\"lastname\": \"Doyle\",  \n\"totalprice\": 523,  \n\"depositpaid\": true,  \n\"bookingdates\": {  \n\"checkin\": \"2024-10-22\",  \n\"checkout\": \"2025-11-27\"  \n},  \n\"additionalneeds\": \"sed rerum ea\"  \n}"
			},
			"response": []
		},
		{
			"name": "Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var responseToken = pm.response.json()\r",
							"pm.environment.set(\"token\", responseToken.token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\t\"username\": \"admin\",\r\n\t\"password\": \"password123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/auth",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Updating Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let statusCode = pm.response.code;\r",
							"\r",
							"if(statusCode === 200){\r",
							"    pm.test(\"Successfully Updated Book\", function () {\r",
							"        pm.environment.set(\"Updated_FirstName\", jsonData.firstname || \"Default_FirstName\");\r",
							"        pm.environment.set(\"Updated_LastName\", jsonData.lastname || \"Default_LastName\");\r",
							"        pm.environment.set(\"Updated_TotalPrice\", jsonData.totalprice || \"Default_TotalPrice\");\r",
							"        pm.environment.set(\"Updated_DepositPaid\", jsonData.depositpaid || \"Default_DepositPaid\");\r",
							"        pm.environment.set(\"Updated_CheckIn\", jsonData.bookingdates.checkin || \"Default_CheckIn\");\r",
							"        pm.environment.set(\"Updated_CheckOut\", jsonData.bookingdates.checkout || \"Default_CheckOut\");\r",
							"        pm.environment.set(\"Updated_AdditionalNeeds\", jsonData.additionalneeds || \"Default_AdditionalNeeds\");\r",
							"    });\r",
							"}\r",
							"else if(statusCode === 403){\r",
							"    pm.test(\"Forbidden\");\r",
							"}\r",
							"else if(statusCode === 404){\r",
							"    pm.test(\"Not Found\");\r",
							"}\r",
							"else{\r",
							"    pm.test(\"Method Not Allowed\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Punjari\",\r\n    \"lastname\": \"Publications\",\r\n    \"totalprice\": 300,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-01-01\",\r\n        \"checkout\": \"2025-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast, Lunch, Dinner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{BookingId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingId}}"
					]
				},
				"description": "{  \n\"firstname\": \"Abrar\",  \n\"lastname\": \"Khan\",  \n\"totalprice\": 100,  \n\"depositpaid\": true,  \n\"bookingdates\": {  \n\"checkin\": \"2018-01-01\",  \n\"checkout\": \"2019-01-01\"  \n},  \n\"additionalneeds\": \"Breakfast, Lunch, Dinner\"  \n}"
			},
			"response": []
		},
		{
			"name": "Verify After Update",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json()\r",
							"\r",
							"pm.test(\"First Name Validation After Update\", function(){\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.environment.get(\"Updated_FirstName\"))\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Last Name Validation After Update\", function(){\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.environment.get(\"Updated_LastName\"))\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Total Price Validation After Update\", function(){\r",
							"    pm.expect(jsonData.totalprice).to.eql(pm.environment.get(\"Updated_TotalPrice\"))\r",
							"\r",
							"})\r",
							"\r",
							"pm.test(\"Deposit Paid Validation After Update\", function(){\r",
							"    pm.expect(jsonData.depositpaid).to.eql(pm.environment.get(\"Updated_DepositPaid\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Checkin Date Validation After Update\", function(){\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.environment.get(\"Updated_CheckIn\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Checkout Date Validation After Update\", function(){\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.environment.get(\"Updated_CheckOut\"))\r",
							"})\r",
							"\r",
							"pm.test(\"Additional Needs Validation After Update\", function(){\r",
							"    pm.expect(jsonData.additionalneeds).to.eql(pm.environment.get(\"Updated_AdditionalNeeds\"))\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey"
				},
				"method": "GET",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Abrar\",\r\n    \"lastname\": \"Khan\",\r\n    \"totalprice\": 100,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast, Lunch, Dinner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{BookingId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingId}}"
					]
				},
				"description": "{  \n\"firstname\": \"Abrar\",  \n\"lastname\": \"Khan\",  \n\"totalprice\": 100,  \n\"depositpaid\": true,  \n\"bookingdates\": {  \n\"checkin\": \"2018-01-01\",  \n\"checkout\": \"2019-01-01\"  \n},  \n\"additionalneeds\": \"Breakfast, Lunch, Dinner\"  \n}"
			},
			"response": []
		},
		{
			"name": "Delete Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let statusCodes = pm.response.code\r",
							"\r",
							"if(statusCodes == 201 || statusCodes == 200){\r",
							"    pm.test(\"Deleted Successfully\")\r",
							"}\r",
							"else if(statusCodes == 403){\r",
							"    pm.test(\"Access to this resource is forbidden\")\r",
							"}\r",
							"else{\r",
							"    pm.test(\"Something Went Wrong\")\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token = {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{BookingId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingId}}"
					]
				},
				"description": "Created"
			},
			"response": []
		},
		{
			"name": "Verify After Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify After Deleting books\r",
							"pm.test(\"Not Found\", function(){\r",
							"    pm.response.to.have.status(404)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{BookingId}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{BookingId}}"
					]
				},
				"description": "Not Found"
			},
			"response": []
		}
	]
}